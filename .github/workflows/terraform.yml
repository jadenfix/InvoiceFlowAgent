name: 'Terraform Infrastructure'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'infra/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'infra/**'
      - '.github/workflows/terraform.yml'

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-west-2'

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive infra/
      
    - name: Terraform Init
      run: |
        cd infra/environments/${{ matrix.environment }}
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd infra/environments/${{ matrix.environment }}
        terraform validate

  terraform-security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: terraform-validate
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Run Checkov Security Scan
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infra/
        framework: terraform
        soft_fail: true
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov Results to GitHub Security Tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif

    - name: Run TFSec Security Scan
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: infra/
        soft_fail: true

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security]
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        environment: [dev]  # Only plan for dev on PRs
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: terraform-plan-${{ matrix.environment }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd infra/environments/${{ matrix.environment }}
        terraform init

    - name: Terraform Plan
      id: plan
      run: |
        cd infra/environments/${{ matrix.environment }}
        terraform plan -no-color -out=tfplan
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform-apply-dev:
    name: 'Terraform Apply (Dev)'
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN_DEV }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: terraform-apply-dev

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd infra/environments/dev
        terraform init

    - name: Terraform Apply
      run: |
        cd infra/environments/dev
        terraform apply -auto-approve

    - name: Save Terraform Outputs
      id: outputs
      run: |
        cd infra/environments/dev
        terraform output -json > terraform-outputs.json
        
    - name: Upload Terraform Outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs-dev
        path: infra/environments/dev/terraform-outputs.json
        retention-days: 30

  terraform-apply-staging:
    name: 'Terraform Apply (Staging)'
    runs-on: ubuntu-latest
    needs: [terraform-apply-dev]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN_STAGING }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: terraform-apply-staging

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd infra/environments/staging
        terraform init

    - name: Terraform Apply
      run: |
        cd infra/environments/staging
        terraform apply -auto-approve

  terraform-apply-prod:
    name: 'Terraform Apply (Production)'
    runs-on: ubuntu-latest
    needs: [terraform-apply-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN_PROD }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: terraform-apply-prod

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd infra/environments/prod
        terraform init

    - name: Terraform Plan
      run: |
        cd infra/environments/prod
        terraform plan -out=tfplan

    - name: Terraform Apply
      run: |
        cd infra/environments/prod
        terraform apply tfplan 