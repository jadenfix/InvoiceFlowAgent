name: InvoiceFlow CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  AWS_REGION: us-west-2
  
jobs:
  # Terraform validation and security scanning
  terraform-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Format Check
        run: |
          find infra/ -name "*.tf" -exec terraform fmt -check=true {} \;

      - name: Terraform Validation
        run: |
          for env in dev staging prod; do
            echo "Validating $env environment..."
            cd infra/environments/$env
            terraform init -backend=false
            terraform validate
            cd ../../..
          done

      - name: Run TFSec Security Scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infra/

      - name: Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infra/
          framework: terraform

  # Auth Service Testing
  auth-service-tests:
    name: Auth Service Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('services/auth/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          cd services/auth
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint Python code
        run: |
          cd services/auth
          python -m flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          python -m flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type check with mypy
        run: |
          cd services/auth
          python -m mypy app/ --ignore-missing-imports

      - name: Run auth service tests
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          JWT_SECRET: test-secret-key-that-is-long-enough-for-testing
          ENVIRONMENT: testing
        run: |
          cd services/auth
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing

      - name: Upload auth service coverage
        uses: codecov/codecov-action@v3
        with:
          file: services/auth/coverage.xml
          flags: auth-service

  # Frontend Testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Type check
        run: |
          cd frontend
          npm run type-check

      - name: Lint frontend code
        run: |
          cd frontend
          npm run lint

      - name: Format check
        run: |
          cd frontend
          npm run format:check

      - name: Run unit tests
        run: |
          cd frontend
          npm run test:coverage

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/coverage-final.json
          flags: frontend

  # E2E Testing
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [auth-service-tests, frontend-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          cd services/auth
          pip install -r requirements.txt

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Start auth service
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          JWT_SECRET: test-secret-key-that-is-long-enough-for-testing
          ENVIRONMENT: testing
        run: |
          cd services/auth
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Start frontend
        env:
          VITE_AUTH_SERVICE_URL: http://localhost:8000
        run: |
          cd frontend
          npm run build
          npm run preview --port 3000 &
          sleep 10

      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and push Docker images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [terraform-validation, auth-service-tests, frontend-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}/auth-service
            ghcr.io/${{ github.repository }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push auth service image
        uses: docker/build-push-action@v5
        with:
          context: services/auth
          push: true
          tags: ghcr.io/${{ github.repository }}/auth-service:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=${{ github.sha }}
            COMMIT_SHA=${{ github.sha }}

      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: frontend
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-images, e2e-tests]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Deploy infrastructure
        run: |
          cd infra/environments/dev
          terraform init
          terraform plan -var="image_tag=${{ github.sha }}"
          terraform apply -auto-approve -var="image_tag=${{ github.sha }}"

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name invoiceflow-dev-cluster

      - name: Deploy auth service
        run: |
          helm upgrade --install invoiceflow-auth-dev ./charts/auth \
            --namespace invoiceflow-dev \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set environment=development \
            --values ./charts/auth/values-dev.yaml

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/invoiceflow-auth-dev -n invoiceflow-dev --timeout=300s
          kubectl get pods -n invoiceflow-dev

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Deploy infrastructure
        run: |
          cd infra/environments/staging
          terraform init
          terraform plan -var="image_tag=${{ github.sha }}"
          terraform apply -auto-approve -var="image_tag=${{ github.sha }}"

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name invoiceflow-staging-cluster

      - name: Deploy auth service
        run: |
          helm upgrade --install invoiceflow-auth-staging ./charts/auth \
            --namespace invoiceflow-staging \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set environment=staging \
            --values ./charts/auth/values-staging.yaml

      - name: Run staging tests
        run: |
          # Add staging-specific health checks and tests
          kubectl rollout status deployment/invoiceflow-auth-staging -n invoiceflow-staging --timeout=300s

  # Deploy to production (manual approval required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Deploy infrastructure
        run: |
          cd infra/environments/prod
          terraform init
          terraform plan -var="image_tag=${{ github.sha }}"
          terraform apply -auto-approve -var="image_tag=${{ github.sha }}"

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name invoiceflow-prod-cluster

      - name: Deploy auth service with blue-green strategy
        run: |
          helm upgrade --install invoiceflow-auth-prod ./charts/auth \
            --namespace invoiceflow-prod \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set environment=production \
            --values ./charts/auth/values-prod.yaml \
            --wait --timeout=10m

      - name: Run production health checks
        run: |
          kubectl rollout status deployment/invoiceflow-auth-prod -n invoiceflow-prod --timeout=600s
          
          # Health check endpoints
          AUTH_SERVICE_URL=$(kubectl get service invoiceflow-auth-prod -n invoiceflow-prod -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          curl -f http://$AUTH_SERVICE_URL/healthz || exit 1
          curl -f http://$AUTH_SERVICE_URL/readyz || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "🚀 Production deployment successful!"
          echo "Auth Service: $AUTH_SERVICE_URL" 