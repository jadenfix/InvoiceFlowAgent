image:
  repository: invoiceflow/ingest
  pullPolicy: IfNotPresent
  tag: "1.0.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

replicaCount: 2

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 8003
  targetPort: 8003

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: ingest.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Environment variables
env:
  SERVICE_NAME: "ingest-service"
  VERSION: "1.0.0"
  DEBUG: "false"
  HOST: "0.0.0.0"
  PORT: "8003"
  WORKERS: "1"
  
  # Database
  DB_POOL_SIZE: "10"
  DB_MAX_OVERFLOW: "20"
  DB_ECHO: "false"
  
  # AWS S3
  AWS_REGION: "us-east-1"
  
  # Message Queue
  RABBITMQ_QUEUE_NAME: "invoice_ingest"
  RABBITMQ_EXCHANGE_NAME: "invoices"
  RABBITMQ_ROUTING_KEY: "ingest"
  
  # File Processing
  MAX_FILE_SIZE_MB: "10"
  UPLOAD_TIMEOUT_SECONDS: "30"
  
  # Retry Configuration
  MAX_RETRIES: "3"
  RETRY_DELAY_SECONDS: "1"
  RETRY_BACKOFF_FACTOR: "2"
  
  # Logging
  LOG_LEVEL: "INFO"
  LOG_FORMAT: "json"
  
  # Health Check
  HEALTH_CHECK_TIMEOUT: "5"

# Secrets - these should be created separately
secrets:
  # Database URL secret
  databaseUrl:
    name: "ingest-db-secret"
    key: "DATABASE_URL"
  
  # AWS credentials secret
  awsCredentials:
    name: "aws-credentials"
    keys:
      accessKeyId: "AWS_ACCESS_KEY_ID"
      secretAccessKey: "AWS_SECRET_ACCESS_KEY"
  
  # S3 configuration secret
  s3Config:
    name: "s3-config"
    keys:
      bucket: "S3_BUCKET"
      endpointUrl: "S3_ENDPOINT_URL"
  
  # RabbitMQ URL secret
  rabbitmqUrl:
    name: "rabbitmq-secret"
    key: "RABBITMQ_URL"

# Health checks
healthChecks:
  livenessProbe:
    httpGet:
      path: /health/live
      port: 8003
    initialDelaySeconds: 30
    periodSeconds: 10
  
  readinessProbe:
    httpGet:
      path: /health/ready
      port: 8003
    initialDelaySeconds: 5
    periodSeconds: 5

# Additional labels
labels: {}

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1 