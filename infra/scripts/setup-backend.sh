#!/bin/bash

# Setup Terraform Backend
# This script creates the S3 bucket and DynamoDB table for Terraform state management

set -e

# Configuration
PROJECT_NAME="invoiceflow"
AWS_REGION="us-west-2"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to create backend for an environment
setup_backend() {
    local env=$1
    local bucket_name="${PROJECT_NAME}-terraform-state-${env}"
    local dynamodb_table="${PROJECT_NAME}-terraform-locks-${env}"
    
    print_status "Setting up Terraform backend for environment: ${env}"
    
    # Check if AWS CLI is configured
    if ! aws sts get-caller-identity > /dev/null 2>&1; then
        print_error "AWS CLI is not configured or credentials are invalid"
        exit 1
    fi
    
    # Get AWS Account ID
    AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
    FULL_BUCKET_NAME="${bucket_name}-${AWS_ACCOUNT_ID}"
    
    print_status "Creating S3 bucket: ${FULL_BUCKET_NAME}"
    
    # Create S3 bucket for state storage
    if aws s3api head-bucket --bucket "${FULL_BUCKET_NAME}" 2>/dev/null; then
        print_warning "S3 bucket ${FULL_BUCKET_NAME} already exists"
    else
        # Create bucket
        if [ "${AWS_REGION}" = "us-east-1" ]; then
            aws s3api create-bucket --bucket "${FULL_BUCKET_NAME}"
        else
            aws s3api create-bucket \
                --bucket "${FULL_BUCKET_NAME}" \
                --region "${AWS_REGION}" \
                --create-bucket-configuration LocationConstraint="${AWS_REGION}"
        fi
        
        # Enable versioning
        aws s3api put-bucket-versioning \
            --bucket "${FULL_BUCKET_NAME}" \
            --versioning-configuration Status=Enabled
        
        # Enable server-side encryption
        aws s3api put-bucket-encryption \
            --bucket "${FULL_BUCKET_NAME}" \
            --server-side-encryption-configuration '{
                "Rules": [
                    {
                        "ApplyServerSideEncryptionByDefault": {
                            "SSEAlgorithm": "AES256"
                        },
                        "BucketKeyEnabled": true
                    }
                ]
            }'
        
        # Block public access
        aws s3api put-public-access-block \
            --bucket "${FULL_BUCKET_NAME}" \
            --public-access-block-configuration \
                BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
        
        print_status "S3 bucket ${FULL_BUCKET_NAME} created and configured"
    fi
    
    print_status "Creating DynamoDB table: ${dynamodb_table}"
    
    # Create DynamoDB table for state locking
    if aws dynamodb describe-table --table-name "${dynamodb_table}" --region "${AWS_REGION}" > /dev/null 2>&1; then
        print_warning "DynamoDB table ${dynamodb_table} already exists"
    else
        aws dynamodb create-table \
            --table-name "${dynamodb_table}" \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
            --region "${AWS_REGION}"
        
        print_status "Waiting for DynamoDB table to become active..."
        aws dynamodb wait table-exists --table-name "${dynamodb_table}" --region "${AWS_REGION}"
        
        print_status "DynamoDB table ${dynamodb_table} created"
    fi
    
    # Update the backend configuration in the environment
    local backend_config_file="../environments/${env}/backend.tf"
    print_status "Updating backend configuration: ${backend_config_file}"
    
    # Create the backend configuration file
    cat > "../environments/${env}/backend.tf" << EOF
# Terraform Backend Configuration for ${env} environment
# Auto-generated by setup-backend.sh

terraform {
  backend "s3" {
    bucket         = "${FULL_BUCKET_NAME}"
    key            = "${env}/terraform.tfstate"
    region         = "${AWS_REGION}"
    encrypt        = true
    dynamodb_table = "${dynamodb_table}"
  }
}
EOF
    
    print_status "Backend setup completed for environment: ${env}"
    echo ""
    echo "Backend Configuration:"
    echo "  S3 Bucket: ${FULL_BUCKET_NAME}"
    echo "  DynamoDB Table: ${dynamodb_table}"
    echo "  Region: ${AWS_REGION}"
    echo ""
}

# Main execution
main() {
    print_status "Starting Terraform backend setup for InvoiceFlow Agent"
    print_status "AWS Account ID: $(aws sts get-caller-identity --query Account --output text)"
    print_status "AWS Region: ${AWS_REGION}"
    echo ""
    
    # Prompt for environments to set up
    if [ $# -eq 0 ]; then
        echo "Which environments would you like to set up? (space-separated)"
        echo "Available: dev staging prod"
        read -p "Environments: " environments
    else
        environments="$*"
    fi
    
    # Set up backend for each environment
    for env in $environments; do
        case $env in
            dev|staging|prod)
                setup_backend "$env"
                ;;
            *)
                print_error "Invalid environment: $env. Valid options: dev, staging, prod"
                ;;
        esac
    done
    
    print_status "All backends set up successfully!"
    echo ""
    echo "Next steps:"
    echo "1. cd to your desired environment directory (e.g., cd ../environments/dev)"
    echo "2. Run 'terraform init' to initialize the backend"
    echo "3. Run 'terraform plan' to see what will be created"
    echo "4. Run 'terraform apply' to create the infrastructure"
}

# Run main function with all arguments
main "$@" 